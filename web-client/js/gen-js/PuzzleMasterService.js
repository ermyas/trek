//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

PuzzleMasterService_submitGuess_args = function(args) {
  this.playerId = null;
  this.puzzleId = null;
  this.siteGuess = null;
  this.targetPuzzleSiteId = null;
  if (args) {
    if (args.playerId !== undefined && args.playerId !== null) {
      this.playerId = args.playerId;
    }
    if (args.puzzleId !== undefined && args.puzzleId !== null) {
      this.puzzleId = args.puzzleId;
    }
    if (args.siteGuess !== undefined && args.siteGuess !== null) {
      this.siteGuess = new Site(args.siteGuess);
    }
    if (args.targetPuzzleSiteId !== undefined && args.targetPuzzleSiteId !== null) {
      this.targetPuzzleSiteId = args.targetPuzzleSiteId;
    }
  }
};
PuzzleMasterService_submitGuess_args.prototype = {};
PuzzleMasterService_submitGuess_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.playerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.puzzleId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.siteGuess = new Site();
        this.siteGuess.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.targetPuzzleSiteId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PuzzleMasterService_submitGuess_args.prototype.write = function(output) {
  output.writeStructBegin('PuzzleMasterService_submitGuess_args');
  if (this.playerId !== null && this.playerId !== undefined) {
    output.writeFieldBegin('playerId', Thrift.Type.STRING, 1);
    output.writeString(this.playerId);
    output.writeFieldEnd();
  }
  if (this.puzzleId !== null && this.puzzleId !== undefined) {
    output.writeFieldBegin('puzzleId', Thrift.Type.STRING, 2);
    output.writeString(this.puzzleId);
    output.writeFieldEnd();
  }
  if (this.siteGuess !== null && this.siteGuess !== undefined) {
    output.writeFieldBegin('siteGuess', Thrift.Type.STRUCT, 3);
    this.siteGuess.write(output);
    output.writeFieldEnd();
  }
  if (this.targetPuzzleSiteId !== null && this.targetPuzzleSiteId !== undefined) {
    output.writeFieldBegin('targetPuzzleSiteId', Thrift.Type.STRING, 4);
    output.writeString(this.targetPuzzleSiteId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PuzzleMasterService_submitGuess_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof PuzzleDoesNotExist) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PuzzleResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
PuzzleMasterService_submitGuess_result.prototype = {};
PuzzleMasterService_submitGuess_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PuzzleResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new PuzzleDoesNotExist();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PuzzleMasterService_submitGuess_result.prototype.write = function(output) {
  output.writeStructBegin('PuzzleMasterService_submitGuess_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PuzzleMasterService_startPuzzle_args = function(args) {
  this.playerId = null;
  this.puzzleId = null;
  if (args) {
    if (args.playerId !== undefined && args.playerId !== null) {
      this.playerId = args.playerId;
    }
    if (args.puzzleId !== undefined && args.puzzleId !== null) {
      this.puzzleId = args.puzzleId;
    }
  }
};
PuzzleMasterService_startPuzzle_args.prototype = {};
PuzzleMasterService_startPuzzle_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.playerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.puzzleId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PuzzleMasterService_startPuzzle_args.prototype.write = function(output) {
  output.writeStructBegin('PuzzleMasterService_startPuzzle_args');
  if (this.playerId !== null && this.playerId !== undefined) {
    output.writeFieldBegin('playerId', Thrift.Type.STRING, 1);
    output.writeString(this.playerId);
    output.writeFieldEnd();
  }
  if (this.puzzleId !== null && this.puzzleId !== undefined) {
    output.writeFieldBegin('puzzleId', Thrift.Type.STRING, 2);
    output.writeString(this.puzzleId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PuzzleMasterService_startPuzzle_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof PuzzleDoesNotExist) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PuzzleResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
PuzzleMasterService_startPuzzle_result.prototype = {};
PuzzleMasterService_startPuzzle_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PuzzleResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new PuzzleDoesNotExist();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PuzzleMasterService_startPuzzle_result.prototype.write = function(output) {
  output.writeStructBegin('PuzzleMasterService_startPuzzle_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PuzzleMasterServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
PuzzleMasterServiceClient.prototype = {};
PuzzleMasterServiceClient.prototype.submitGuess = function(playerId, puzzleId, siteGuess, targetPuzzleSiteId, callback) {
  this.send_submitGuess(playerId, puzzleId, siteGuess, targetPuzzleSiteId, callback); 
  if (!callback) {
    return this.recv_submitGuess();
  }
};

PuzzleMasterServiceClient.prototype.send_submitGuess = function(playerId, puzzleId, siteGuess, targetPuzzleSiteId, callback) {
  this.output.writeMessageBegin('submitGuess', Thrift.MessageType.CALL, this.seqid);
  var args = new PuzzleMasterService_submitGuess_args();
  args.playerId = playerId;
  args.puzzleId = puzzleId;
  args.siteGuess = siteGuess;
  args.targetPuzzleSiteId = targetPuzzleSiteId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_submitGuess();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PuzzleMasterServiceClient.prototype.recv_submitGuess = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PuzzleMasterService_submitGuess_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'submitGuess failed: unknown result';
};
PuzzleMasterServiceClient.prototype.startPuzzle = function(playerId, puzzleId, callback) {
  this.send_startPuzzle(playerId, puzzleId, callback); 
  if (!callback) {
    return this.recv_startPuzzle();
  }
};

PuzzleMasterServiceClient.prototype.send_startPuzzle = function(playerId, puzzleId, callback) {
  this.output.writeMessageBegin('startPuzzle', Thrift.MessageType.CALL, this.seqid);
  var args = new PuzzleMasterService_startPuzzle_args();
  args.playerId = playerId;
  args.puzzleId = puzzleId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_startPuzzle();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PuzzleMasterServiceClient.prototype.recv_startPuzzle = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PuzzleMasterService_startPuzzle_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'startPuzzle failed: unknown result';
};
